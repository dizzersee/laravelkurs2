"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {

    hello: String!

    greet(name: String!): String!

    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    post(
      id: ID @eq
    ): Post @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)


    topics: [Topic!]! @all
}

type Mutation {
    createPost(
        input: CreatePostInput! @spread
    ): Post @create

    updatePost(
        id: ID! @eq
        input: UpdatePostInput! @spread
    ): Post @update

    deletePost(
        id: ID! @eq
    ): Post @delete
}

input UpdatePostInput {
    title: String @rules(apply: ["string", "max:255"])
    content: String @rules(apply: ["string"])
}

input CreatePostInput {
    title: String! @rules(apply: ["required", "string", "max:255"])
    content: String! @rules(apply: ["required", "string"]),
    user_id: ID! @rules(apply: ["required", "exists:users,id"])
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    posts: [Post!]! @hasMany

    user: Profile! @hasOne
}

type Post {
    id: ID!
    title: String!
    content: String!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
    topics: [Topic!]! @belongsToMany
}

type Topic {
    id: ID!
    title: String!
    description: String!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!]! @belongsToMany
}

type Profile {
    id: ID!
    description: String!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
}
